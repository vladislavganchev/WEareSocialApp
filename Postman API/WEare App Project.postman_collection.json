{
	"info": {
		"_postman_id": "641c9f59-166f-4579-82d6-e589bf6bacfa",
		"name": "WEare App Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28729275"
	},
	"item": [
		{
			"name": "User Controller",
			"item": [
				{
					"name": "Get Users",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}') ",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)",
											"",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)",
											"",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, 'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser = pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set('generatedIdUser', generatedIdUser);",
											"",
											"let generatedNameUser = pm.response.text().split(\" \")[3]",
											"pm.collectionVariables.set('generatedNameUser', generatedNameUser)",
											"",
											"pm.test(\"Body contains specific string response for successful register action\",() => {",
											"    pm.expect(pm.response.text()).to.eql(\"User with name \"+pm.collectionVariables.get(\"randomUserName\")+\" and id \"+",
											"    generatedIdUser+\" was created\");",
											"});pm.test(\"Body contains specific string response for successful register action\",() => {",
											"    pm.expect(pm.response.text()).to.eql(\"User with name \"+pm.collectionVariables.get(\"randomUserName\")+\" and id \"+",
											"    generatedIdUser+\" was created\", \"Error: Response body does not match the expected string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authorities\": [\n        \"{{roleUser}}\"\n    ],  \n    \"category\": {\n        \"id\": {{categoryNumber}},\n        \"name\": \"{{categoryName}}\"\n    },\n\n    \"confirmPassword\": \"{{$randomPassword}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{randomPassword}}\",\n    \"username\": \"{{randomUserName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200, `Expected status code: 200, Actual: ${pm.response.status}`);",
											"});",
											"",
											"console.log(pm.cookies.get('JSESSIONID'))",
											"const sessionId = pm.cookies.get('JSESSIONID')",
											"pm.environment.set(\"sessionId\", sessionId);",
											"",
											"pm.test(\"Verify JSESSIONID Cookie exists\", function(){",
											"    const actualCookie = pm.cookies.get('JSESSIONID');",
											"    pm.expect(actualCookie, `Expected JSESSIONID cookie to exist, Actual: ${actualCookie}`).to.not.be.empty;",
											"});",
											"",
											"var JsonData = pm.response.text()",
											"pm.test(\"Returned text body contains the LOGOUT button\", () => {",
											"    pm.expect(JsonData, \"Login is not successfull as LOGOUT button is not available\").to.include(\"LOGOUT\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify that generatedIdUser is inside the response body\", function () {",
											"    const actualResponseText = pm.response.text();",
											"    pm.expect(actualResponseText, `Expected response text to include generatedIdUser: ${pm.collectionVariables.get(\"generatedIdUser\")}`).to.include(pm.collectionVariables.get(\"generatedIdUser\"));",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Verify that generatedNameUser is inside the response body\", function () {",
											"    const actualResponseText = pm.response.text();",
											"    pm.expect(actualResponseText, `Expected response text to include generatedNameUser: ${pm.collectionVariables.get(\"generatedNameUser\")}`).to.include(pm.collectionVariables.get(\"generatedNameUser\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"index\": 0,\n  \"next\": true,\n  \"searchParam1\": \"\",\n  \"searchParam2\": \"\",\n  \"size\": {{numberOfUser}}\n}\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Register User",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)",
											"",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)",
											"",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);",
											"",
											"pm.test(\"Response body contains specific success message with created user id and name\", () => {",
											"    const expectedMessage = `User with name ${pm.collectionVariables.get(\"randomUserName\")} and id ${generatedIdUser} was created`;",
											"    const actualResponseText = pm.response.text();",
											"    pm.expect(actualResponseText, `Expected response text: \"${expectedMessage}\", Actual: \"${actualResponseText}\"`).to.eql(expectedMessage);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authorities\": [\n        \"{{roleUser}}\"\n    ],  \n    \"category\": {\n        \"id\": {{categoryNumber}},\n        \"name\": \"{{categoryName}}\"\n    },\n\n    \"confirmPassword\": \"{{$randomPassword}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{randomPassword}}\",\n    \"username\": \"{{randomUserName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Show Profile Posts",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);\r",
											"\r",
											"pm.test(\"Verify Cookie exists\", function(){\r",
											"    pm.expect(pm.cookies.get('JSESSIONID')).to.not.be.empty, 'JSESSIONID is empty'})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Public Post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"var JsonData = pm.response.json();",
											"console.log(JsonData);",
											"",
											"var jsonData = JSON.parse(responseBody)",
											"console.log(jsonData[\"postId\"])",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{{postContent}}\",\n    \"picture\": \"{{postContent}}\",\n    \"public\":true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Profile Posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var JsonData = pm.response.json();",
											"console.log(JsonData);",
											"",
											"pm.test(\"Response body content should contain the post id and have correct form body\", function () {",
											"    pm.expect(JsonData[0].postId).to.be.equal(pm.collectionVariables.get(\"postId\"),\"Post ID is not as expected.\");",
											"    pm.expect(JsonData[0].public).to.be.oneOf([true, false],\"The 'public' field is not valid.\");",
											"    pm.expect(JsonData[0].liked).to.be.oneOf([true, false],\"The 'liked' field is not valid.\");",
											"});",
											"",
											"pm.test(\"Verify that the response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    const expectedMessage = \"Expected response data to be an array with at least one element\";",
											"    ",
											"    pm.expect(responseData, expectedMessage).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"index\": 0,\n  \"next\": true,\n  \"searchParam1\": \"\",\n  \"searchParam2\": \"\",\n  \"size\": {{numberOfUserPosts}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}{{generatedIdUser}}/posts",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}{{generatedIdUser}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get User By Id",
					"item": [
						{
							"name": "Register User Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show User By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData.id);\r",
											"\r",
											"pm.test(\"Response body should show the requested username and id\", function () {\r",
											"    const expectedUserId = parseInt(pm.collectionVariables.get(\"generatedIdUser\"));\r",
											"    const expectedUsername = pm.collectionVariables.get(\"randomUserName\");\r",
											"\r",
											"    pm.expect(JsonData.id, `Expected user ID: ${expectedUserId}, Actual: ${JsonData.id}`).to.be.eql(expectedUserId);\r",
											"    pm.expect(JsonData.username, `Expected username: ${expectedUsername}, Actual: ${JsonData.username}`).to.equal(expectedUsername);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}auth/{{generatedIdUser}}?principal={{randomUserName}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}auth"
									],
									"path": [
										"{{generatedIdUser}}"
									],
									"query": [
										{
											"key": "principal",
											"value": "{{randomUserName}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upgrade User Expertise Profile",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade User Expertise Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate that the 'id' field is a non-zero integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const idValue = responseData.id;\r",
											"\r",
											"    pm.expect(responseData, \"Response data should be an object\").to.be.an('object');\r",
											"    pm.expect(idValue, `Expected 'id' to be a non-zero integer, but it is: ${idValue}`).to.be.a('number').and.to.not.equal(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate that 'skills' field is an array and is not empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.skills).to.be.an('array');\r",
											"    pm.expect(responseData.skills).to.have.lengthOf.at.least(1, \"Skills array should not be empty\");\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData);\r",
											"pm.test(\"Response body has the correct job title content\", function () {\r",
											"    pm.expect(JsonData.skills[0].skill).to.equal(pm.collectionVariables.get(\"randomJobTitle\"))\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the category field\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.category).to.exist.and.to.be.an('object');\r",
											"    pm.expect(responseData.category.id).to.exist.and.to.be.a('number').and.to.be.above(0);\r",
											"    pm.expect(responseData.category.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"pm.test(\"Availability field is a non-zero integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.availability).to.be.at.least(0);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var skill1 = pm.variables.replaceIn('{{$randomJobTitle}}');\r",
											"pm.collectionVariables.set(\"randomJobTitle\", skill1);\r",
											"\r",
											"var skill2 = pm.variables.replaceIn('{{$randomJobTitle}}');\r",
											"pm.collectionVariables.set(\"randomJobTitle2\", skill2);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"availability\": 100,\r\n  \"category\": {\r\n    \"id\": 120,\r\n    \"name\": \"Hairdresser\"\r\n  },\r\n  \"id\": {{generatedIdUser}},\r\n  \"skill1\": \"{{randomJobTitle2}}\",\r\n  \"skills\": [\r\n    \"{{randomJobTitle}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}auth/{{generatedIdUser}}/expertise",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}auth"
									],
									"path": [
										"{{generatedIdUser}}",
										"expertise"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upgrade User Personal Profile",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade User Personal Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate that the 'id' field is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json()\r",
											"pm.test(\"Response body has the requested first and last names\", function () {\r",
											"    pm.expect(JsonData).to.be.an('object');\r",
											"    pm.expect(JsonData.firstName).to.equal(pm.collectionVariables.get(\"randomFirstName\"))\r",
											"    pm.expect(JsonData.lastName).to.equal(pm.collectionVariables.get(\"randomLastName\"))\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"Response body has the correct random city\", function () {\r",
											"    const randomNumCity = pm.collectionVariables.get(\"randomNumCity\");\r",
											"    const actualCityId = JsonData.location.city.id;\r",
											"    pm.expect(actualCityId, `Expected city ID: ${randomNumCity}, Actual: ${actualCityId}`).to.be.equal(randomNumCity);\r",
											"});\r",
											"\r",
											"pm.test(\"The 'sex' field should be either 'male' or 'female'\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const sexValue = responseData.sex;\r",
											"    pm.expect(sexValue, `Expected 'sex' to be either 'male' or 'female, but it is: ${sexValue}`).to.be.oneOf(['MALE', 'FEMALE']);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set (\"randomNumCity\", _.random (0,40));\r",
											"\r",
											"var randomFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"pm.collectionVariables.set(\"randomFirstName\", randomFirstName);\r",
											"\r",
											"var randomLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"pm.collectionVariables.set(\"randomLastName\", randomLastName);\r",
											"\r",
											"console.log(randomFirstName)\r",
											"console.log(randomLastName)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{generatedIdUser}},\r\n    \"username\": \"{{generatedNameUser}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"{{randomFirstName}}\",\r\n    \"lastName\": \"{{randomLastName}}\",\r\n    \"sex\": \"MALE\",\r\n    \"birthYear\": \"1999-09-09\",\r\n    \"personalReview\": \"{{$randomPhrase}}\",\r\n    \"location\": {\r\n        \"city\": {\r\n            \"id\": {{randomNumCity}},\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"country\": {}\r\n            \r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}auth/{{generatedIdUser}}/personal?name={{randomUserName}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}auth"
									],
									"path": [
										"{{generatedIdUser}}",
										"personal"
									],
									"query": [
										{
											"key": "name",
											"value": "{{randomUserName}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Post Controller",
			"item": [
				{
					"name": "Find All Posts",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Public Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\":true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find All Posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Last created post is among all posts\", function () {\r",
											"    const postIdToFind = pm.collectionVariables.get(\"postId\");\r",
											"    const responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, `The response body should contain the last 'postId' (${postIdToFind}). Actual response: ${responseBody}`).to.include(postIdToFind);\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"console.log(jsonData);\r",
											"\r",
											"pm.test(\"Response body should have valid fields\", function () {\r",
											"    const postData = jsonData[0];\r",
											"    \r",
											"    pm.expect(postData.postId, \"postId should be a number\").to.be.a('number');\r",
											"    pm.expect(postData.content, \"content should be a string\").to.be.a('string');\r",
											"    pm.expect(postData.rank, \"rank should be a number\").to.be.a(\"number\");\r",
											"    pm.expect(postData.public, \"public should be either true or false\").to.be.oneOf([true, false]);\r",
											"    pm.expect(postData.liked, \"liked should be either true or false\").to.be.oneOf([true, false]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should contain category id and name\", function(){\r",
											"    const postData = jsonData[0];\r",
											"    const categoryData = postData.category;\r",
											"    pm.expect(categoryData, \"category should be an object\").to.be.an('object');\r",
											"    pm.expect(categoryData.id, \"Category ID should be a number\").to.be.a('number');\r",
											"    pm.expect(categoryData.name, \"Category name should be a string\").to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sorted",
										"value": "{{sorted}}",
										"type": "text"
									},
									{
										"key": "unsorted",
										"value": "{{unsorted}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}{{postEndpoint}}/",
									"host": [
										"{{baseUrl}}{{postEndpoint}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create a Post",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Public Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData);\r",
											"pm.test(\"postId returned in response body\", function () {\r",
											"    pm.expect(JsonData.postId, \"postId should not be null\").to.not.null;\r",
											"    pm.expect(JsonData.postId, \"postId should be a number\").to.be.a('number');\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])\r",
											"\r",
											"\r",
											"pm.test(\"Response body contains the requested content body\",() => {\r",
											"    var responseBody = JSON.parse(pm.response.text());\r",
											"    var actualContent = responseBody.content;\r",
											"    var expectedContent = pm.collectionVariables.get(\"postContent\");\r",
											"\r",
											"    pm.expect(actualContent, `Expected content: ${expectedContent}, Actual: ${actualContent}`).to.equal(expectedContent);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should contain category id and name\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const category = jsonData.category;\r",
											"\r",
											"    pm.expect(category.id, \"Category ID should exist\").to.exist;\r",
											"    pm.expect(category.name, \"Category name should exist\").to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Confirming that created post is public\", function () {\r",
											"    pm.expect(JsonData.public, \"The 'public' field should be true\").to.be.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Post creation date is correct and DD/MM/YYYY format\", function () {\r",
											"    var date = pm.response.json().date;\r",
											"    var today = new Date().toLocaleDateString('en-GB');\r",
											"    pm.expect(date, `Expected date to contain today's date (${today}), Actual: ${date}`).to.contain(today);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\":true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit a Post",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Public Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\":true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Created Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"JsonData = pm.response.text();\r",
											"console.log(JsonData);\r",
											"\r",
											"pm.test(\"Response should have no body\", function () {\r",
											"    pm.expect(JsonData, \"Response body should be empty\").to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomEditedContent = pm.variables.replaceIn('{{$randomCatchPhraseAdjective}}')\r",
											"pm.collectionVariables.set(\"randomEditedContent\", randomEditedContent)\r",
											"\r",
											"var randomEditPicture = pm.variables.replaceIn('{{$randomAbbreviation}}')\r",
											"pm.collectionVariables.set(\"randomEditPicture\", randomEditPicture)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{randomEditedContent}}\",\r\n    \"picture\": \"{{randomEditPicture}}\",\r\n    \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postEdit}}?postId={{postId}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postEdit}}"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{postId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Like a Post",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Public Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\":true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like Created Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body's postId equals to collection variable's postId\", function() {\r",
											"    const responsePostId = pm.response.json().postId;\r",
											"    const collectionPostId = pm.collectionVariables.get(\"postId\");\r",
											"\r",
											"    pm.expect(responsePostId, `Expected postId: ${collectionPostId}, Actual: ${responsePostId}`).to.eql(collectionPostId);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if the post is liked\", function() {\r",
											"    const likedStatus = pm.response.json().liked;\r",
											"    pm.expect(likedStatus, \"The post should be liked\").to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should contain the correct form data\", function () {\r",
											"    const JsonData = pm.response.json();\r",
											"    pm.expect(JsonData, \"Response body should be an object\").to.be.an(\"object\");\r",
											"    pm.expect(JsonData.postId, \"postId should be a number\").to.be.an(\"number\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postLike}}?postId={{postId}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postLike}}"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{postId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete a Post",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Public Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\":true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Created Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"JsonData = pm.response.text();\r",
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(JsonData, \"Response body should be empty\").to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}{{postEndpoint}}/auth/manager?postId={{postId}}",
									"host": [
										"{{baseUrl}}{{postEndpoint}}"
									],
									"path": [
										"auth",
										"manager"
									],
									"query": [
										{
											"key": "postId",
											"value": "{{postId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Show Comments",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],\r\n    \"category\": {\r\n        \"id\": 106,\r\n        \"name\": \"All\"\r\n    },\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Public Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\":true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData.commentId);\r",
											"pm.collectionVariables.set(\"commentId\",JsonData.commentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var commentContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"commentContent\", commentContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{commentContent}}\",\r\n  \"postId\": {{postId}},\r\n  \"userId\": {{generatedIdUser}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/auth/creator",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"auth",
										"creator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Created Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData);\r",
											"pm.test(\"commentId returned in response body and is a number\", function () {\r",
											"    pm.expect(JsonData.commentId, \"commentId should not be null\").to.not.null;\r",
											"    pm.expect(JsonData.commentId, \"commentId should be a number\").to.be.an('number');\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData.commentId);\r",
											"pm.collectionVariables.set(\"commentId\",JsonData.commentId);\r",
											"\r",
											"pm.test(\"Response body's content equals to the request's content body\",() => {\r",
											"    var responseBody = JSON.parse(pm.response.text());\r",
											"    var actualContent = responseBody.content;\r",
											"    var expectedContent = pm.collectionVariables.get(\"commentContent\");\r",
											"    pm.expect(actualContent, `Expected content: ${expectedContent}, Actual: ${actualContent}`).to.equal(expectedContent);\r",
											"});\r",
											"\r",
											"pm.test(\"Post creation date is today and DD/MM/YYYY format\", function () {\r",
											"    var date = pm.response.json().date;\r",
											"    var today = new Date().toLocaleDateString('en-GB');\r",
											"    pm.expect(date, `Expected date to contain today's date (${today}), Actual: ${date}`).to.contain(today);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/single?commentId={{commentId}}",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"single"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Comment Controller",
			"item": [
				{
					"name": "Find All Comments",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData.commentId);\r",
											"pm.collectionVariables.set(\"commentId\",JsonData.commentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var commentContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"commentContent\", commentContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{commentContent}}\",\r\n  \"postId\": {{postId}},\r\n  \"userId\": {{generatedIdUser}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/auth/creator",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"auth",
										"creator"
									],
									"query": [
										{
											"key": "name",
											"value": "tra-lala",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find All Comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Comment IDs are sorted from smaller to greater\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    const commentIds = responseJson.map(comment => comment.commentId);\r",
											"    const sortedCommentIds = [...commentIds].sort((a, b) => a - b);\r",
											"    pm.expect(commentIds, \"Comment IDs should be sorted from smaller to greater\").to.deep.equal(sortedCommentIds);\r",
											"});\r",
											"\r",
											"var JSONData = pm.response.json();\r",
											"pm.test(\"Response body should contain the correct form data\", function() {\r",
											"    pm.expect(JSONData[0], \"Response data should be an object\").to.be.an(\"object\");\r",
											"    pm.expect(JSONData[0].commentId, \"commentId should be a number\").to.be.an(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Returned Text Body contains the created content body\", () => {\r",
											"    const expectedContent = pm.collectionVariables.get(\"commentContent\");\r",
											"    const actualContent = pm.response.text();\r",
											"    pm.expect(actualContent).to.include(expectedContent, `The response text should contain the expected content: ${expectedContent}`);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}?sorted=true&unsorted=true",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"query": [
										{
											"key": "sorted",
											"value": "true"
										},
										{
											"key": "unsorted",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Comment",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData);\r",
											"pm.test(\"postId returned in response body\", function () {\r",
											"    pm.expect(JsonData.postId, \"postId should not be null\").to.not.null;\r",
											"    pm.expect(JsonData.postId, \"postId should be a number\").to.be.a('number');\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])\r",
											"\r",
											"\r",
											"pm.test(\"Response body contains the requested content body\",() => {\r",
											"    var responseBody = JSON.parse(pm.response.text());\r",
											"    var actualContent = responseBody.content;\r",
											"    var expectedContent = pm.collectionVariables.get(\"postContent\");\r",
											"\r",
											"    pm.expect(actualContent, `Expected content: ${expectedContent}, Actual: ${actualContent}`).to.equal(expectedContent);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should contain category id and name\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const category = jsonData.category;\r",
											"\r",
											"    pm.expect(category.id, \"Category ID should exist\").to.exist;\r",
											"    pm.expect(category.name, \"Category name should exist\").to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Confirming that created post is public\", function () {\r",
											"    pm.expect(JsonData.public, \"The 'public' field should be true\").to.be.deep.equal(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Post creation date is correct and DD/MM/YYYY format\", function () {\r",
											"    var date = pm.response.json().date;\r",
											"    var today = new Date().toLocaleDateString('en-GB');\r",
											"    pm.expect(date, `Expected date to contain today's date (${today}), Actual: ${date}`).to.contain(today);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData.commentId);\r",
											"pm.collectionVariables.set(\"commentId\",JsonData.commentId);\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData);\r",
											"pm.test(\"commentId returned in response body and is a number\", function () {\r",
											"    pm.expect(JsonData.commentId, \"commentId should not be null\").to.not.null;\r",
											"    pm.expect(JsonData.commentId, \"commentId should be a number\").to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Response body's content equals to the request's content body\",() => {\r",
											"    var responseBody = JSON.parse(pm.response.text());\r",
											"    var actualContent = responseBody.content;\r",
											"    var expectedContent = pm.collectionVariables.get(\"commentContent\");\r",
											"    pm.expect(actualContent, `Expected content: ${expectedContent}, Actual: ${actualContent}`).to.equal(expectedContent);\r",
											"});\r",
											"\r",
											"pm.test(\"Post creation date is today and DD/MM/YYYY format\", function () {\r",
											"    var date = pm.response.json().date;\r",
											"    var today = new Date().toLocaleDateString('en-GB');\r",
											"    pm.expect(date, `Expected date to contain today's date (${today}), Actual: ${date}`).to.contain(today);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var commentContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"commentContent\", commentContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{commentContent}}\",\r\n  \"postId\": {{postId}},\r\n  \"userId\": {{generatedIdUser}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/auth/creator",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"auth",
										"creator"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit Comment",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData.commentId);\r",
											"pm.collectionVariables.set(\"commentId\",JsonData.commentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var commentContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"commentContent\", commentContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{commentContent}}\",\r\n  \"postId\": {{postId}},\r\n  \"userId\": {{generatedIdUser}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/auth/creator",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"auth",
										"creator"
									],
									"query": [
										{
											"key": "name",
											"value": "tra-lala",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Created Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"JsonData = pm.response.text();\r",
											"console.log(JsonData);\r",
											"\r",
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(JsonData, \"Response body should be empty\").to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var editedPostContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"editedPostContent\", editedPostContent)\r",
											"\r",
											"var editedPostName = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"editedPostName\", editedPostName)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/auth/editor?commentId={{commentId}}&content={{editedPostContent}}&name={{editedPostName}}",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"auth",
										"editor"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										},
										{
											"key": "content",
											"value": "{{editedPostContent}}"
										},
										{
											"key": "name",
											"value": "{{editedPostName}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Like Comment",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)",
											"",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)",
											"",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser = pm.response.text().split(\" \")[6];",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authorities\": [\n        \"{{roleUser}}\"\n    ],  \n    \"category\": {\n        \"id\": {{categoryNumber}},\n        \"name\": \"{{categoryName}}\"\n    },\n\n    \"confirmPassword\": \"{{$randomPassword}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{randomPassword}}\",\n    \"username\": \"{{randomUserName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"console.log(pm.cookies.get('JSESSIONID'))",
											"const sessionId = pm.cookies.get('JSESSIONID')",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody)",
											"console.log(jsonData[\"postId\"])",
											"pm.collectionVariables.set(\"postId\", jsonData[\"postId\"])"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{{postContent}}\",\n    \"picture\": \"{{postContent}}\",\n    \"public\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var commentContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')",
											"pm.collectionVariables.set(\"commentContent\", commentContent)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"var JsonData = pm.response.json();",
											"console.log(JsonData.commentId);",
											"pm.collectionVariables.set(\"commentId\",JsonData.commentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"{{commentContent}}\",\n  \"postId\": {{postId}},\n  \"userId\": {{generatedIdUser}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/auth/creator",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"auth",
										"creator"
									]
								}
							},
							"response": []
						},
						{
							"name": "Like Created Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var expectedCommentId = parseInt(pm.collectionVariables.get(\"commentId\"));",
											"pm.test(\"CommentId that user liked is the requested comment\", function() {",
											"    pm.expect(jsonData.commentId, \"commentId should match the expected commentId\").to.equal(expectedCommentId);",
											"});",
											"",
											"pm.test(\"Check the response structure\", function() {",
											"    pm.expect(jsonData, \"Response data should be an object\").to.be.an(\"object\");",
											"    pm.expect(jsonData.commentId, \"commentId should be a number\").to.be.an(\"number\");",
											"    pm.expect(jsonData.content, \"content should be a string\").to.be.an(\"string\");",
											"});",
											"",
											"console.log(jsonData);",
											"",
											"pm.test(\"Check if the comment is liked\", function() {",
											"    pm.expect(jsonData.liked, \"The comment should be liked\").to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/auth/likesUp?commentId={{commentId}}",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"auth",
										"likesUp"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Comment",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData.commentId);\r",
											"pm.collectionVariables.set(\"commentId\",JsonData.commentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var commentContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"commentContent\", commentContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{commentContent}}\",\r\n  \"postId\": {{postId}},\r\n  \"userId\": {{generatedIdUser}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/auth/creator",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"auth",
										"creator"
									],
									"query": [
										{
											"key": "name",
											"value": "tra-lala",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Created Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"JsonData = pm.response.text();\r",
											"console.log(JsonData);\r",
											"\r",
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(JsonData, \"Response body should be empty\").to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/auth/manager?commentId={{commentId}}",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"auth",
										"manager"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Find All Comments Of Post",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData.commentId);\r",
											"pm.collectionVariables.set(\"commentId\",JsonData.commentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var commentContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"commentContent\", commentContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{commentContent}}\",\r\n  \"postId\": {{postId}},\r\n  \"userId\": {{generatedIdUser}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/auth/creator",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"auth",
										"creator"
									],
									"query": [
										{
											"key": "name",
											"value": "tra-lala",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find All Comments Of A Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body's commentId should be equal to collection variable commentId\", function() {\r",
											"    var savedCommentId = parseInt(pm.collectionVariables.get(\"commentId\")); \r",
											"    var responseBody = pm.response.json();\r",
											"    var responseCommentId = parseInt(responseBody[0].commentId);\r",
											"    pm.expect(responseCommentId, `Expected commentId: ${savedCommentId}, Actual: ${responseCommentId}`).to.equal(savedCommentId);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body's content should be equal to collection variable editedPostContent\", function() {\r",
											"    var savedContent = pm.collectionVariables.get(\"commentContent\"); \r",
											"    var responseBody = pm.response.json();\r",
											"    var responseContent = responseBody[0].content;\r",
											"    pm.expect(responseContent, `Expected content: ${savedContent}, Actual: ${responseContent}`).to.equal(savedContent);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/byPost?postId={{postId}}&sorted=true&unsorted=true",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"byPost"
									],
									"query": [
										{
											"key": "name",
											"value": "register",
											"disabled": true
										},
										{
											"key": "postId",
											"value": "{{postId}}"
										},
										{
											"key": "sorted",
											"value": "true"
										},
										{
											"key": "unsorted",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Created Comment",
					"item": [
						{
							"name": "Register User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUser =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUser\", generatedIdUser);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"randomUserName\", randomUserName)\r",
											"\r",
											"var randomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"randomPassword\", randomPassword)\r",
											"\r",
											"var randomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{$randomPassword}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"username\": \"{{randomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Registered User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{randomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{randomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"console.log(jsonData[\"postId\"])\r",
											"pm.collectionVariables.set(\"postId\",jsonData[\"postId\"])"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var postContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"postContent\", postContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=6B55961365A44961B9E3C3A5E5DBF2CD",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{postContent}}\",\r\n    \"picture\": \"{{postContent}}\",\r\n    \"public\": true\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}{{postAuth}}{{postSave}}",
									"host": [
										"{{baseUrl}}{{postAuth}}{{postSave}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"console.log(JsonData.commentId);\r",
											"pm.collectionVariables.set(\"commentId\",JsonData.commentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var commentContent = pm.variables.replaceIn('{{$randomCatchPhraseNoun}}')\r",
											"pm.collectionVariables.set(\"commentContent\", commentContent)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"{{commentContent}}\",\r\n  \"postId\": {{postId}},\r\n  \"userId\": {{generatedIdUser}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/auth/creator",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"auth",
										"creator"
									],
									"query": [
										{
											"key": "name",
											"value": "tra-lala",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Created Comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"pm.test(\"Check the structure\", function() {",
											"    pm.expect(pm.response.json(), \"Response data should be an object\").to.be.an(\"object\");",
											"    pm.expect(pm.response.json().commentId, \"commentId should be a number\").to.be.an(\"number\");",
											"});",
											"",
											"pm.test(\"Verify that commentId is same as previously created one\", function() {",
											"    pm.expect(parseInt(pm.response.json().commentId), \"commentId should match the collection variable\").to.equal(Number(pm.collectionVariables.get(\"commentId\")));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}{{commentEndpoint}}/single?commentId={{commentId}}",
									"host": [
										"{{baseUrl}}{{commentEndpoint}}"
									],
									"path": [
										"single"
									],
									"query": [
										{
											"key": "commentId",
											"value": "{{commentId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Connection Controller",
			"item": [
				{
					"name": "Send Request",
					"item": [
						{
							"name": "Register Receiver User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUserReceiver =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUserReceiver\", generatedIdUserReceiver);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var receiverRandomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"receiverRandomUserName\", receiverRandomUserName)\r",
											"\r",
											"var receiverRandomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"receiverRandomPassword\", receiverRandomPassword)\r",
											"\r",
											"var receiverRandomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"receiverRandomEmail\", receiverRandomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{receiverRandomPassword}}\",\r\n    \"email\": \"{{receiverRandomEmail}}\",\r\n    \"password\": \"{{receiverRandomPassword}}\",\r\n    \"username\": \"{{receiverRandomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Sender User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUserSender =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUserSender\", generatedIdUserSender);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var senderRandomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"senderRandomUserName\", senderRandomUserName)\r",
											"\r",
											"var senderRandomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"senderRandomPassword\", senderRandomPassword)\r",
											"\r",
											"var senderRandomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"senderRandomEmail\", senderRandomEmail)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{senderRandomPassword}}\",\r\n    \"email\": \"{{senderRandomEmail}}\",\r\n    \"password\": \"{{senderRandomPassword}}\",\r\n    \"username\": \"{{senderRandomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Sender User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{senderRandomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{senderRandomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains specific string response for successfully sending connection request\",() => {\r",
											"    var senderRandomUserName = pm.collectionVariables.get(\"senderRandomUserName\")\r",
											"    pm.expect(pm.response.text()).to.include(senderRandomUserName+\" send friend request to \"+pm.collectionVariables.get(\"receiverRandomUserName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{generatedIdUserReceiver}},  //works hardcoded only\r\n  \"username\": \"{{receiverRandomUserName}}\" //variable does not get filled \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/request?principal={{senderRandomUserName}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"request"
									],
									"query": [
										{
											"key": "principal",
											"value": "{{senderRandomUserName}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get User Request",
					"item": [
						{
							"name": "Register Receiver",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var receiverRandomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')",
											"pm.collectionVariables.set(\"receiverRandomUserName\", receiverRandomUserName)",
											"",
											"var receiverRandomPassword = pm.variables.replaceIn('{{$randomPassword}}')",
											"pm.collectionVariables.set(\"receiverRandomPassword\", receiverRandomPassword)",
											"",
											"var receiverRandomEmail = pm.variables.replaceIn('{{$randomEmail}}')",
											"pm.collectionVariables.set(\"receiverRandomEmail\", receiverRandomEmail)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUserReceiver =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUserReceiver\", generatedIdUserReceiver);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authorities\": [\n        \"{{roleUser}}\"\n    ],  \n    \"category\": {\n        \"id\": {{categoryNumber}},\n        \"name\": \"{{categoryName}}\"\n    },\n\n    \"confirmPassword\": \"{{receiverRandomPassword}}\",\n    \"email\": \"{{receiverRandomEmail}}\",\n    \"password\": \"{{receiverRandomPassword}}\",\n    \"username\": \"{{receiverRandomUserName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Sender User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUserSender =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUserSender\", generatedIdUserSender);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var senderRandomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"senderRandomUserName\", senderRandomUserName)\r",
											"\r",
											"var senderRandomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"senderRandomPassword\", senderRandomPassword)\r",
											"\r",
											"var senderRandomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"senderRandomEmail\", senderRandomEmail)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{senderRandomPassword}}\",\r\n    \"email\": \"{{senderRandomEmail}}\",\r\n    \"password\": \"{{senderRandomPassword}}\",\r\n    \"username\": \"{{senderRandomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Sender User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{senderRandomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{senderRandomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{generatedIdUserReceiver}},  //works hardcoded only\r\n  \"username\": \"{{receiverRandomUserName}}\" //variable does not get filled \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/request?principal={{senderRandomUserName}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"request"
									],
									"query": [
										{
											"key": "principal",
											"value": "{{senderRandomUserName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout Sender User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=BF5B8190ABD1AFCF24B51BC1FECDD53E"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"url": {
									"raw": "{{baseUrl}}{{logoutEndpoint}}",
									"host": [
										"{{baseUrl}}{{logoutEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Receiver User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{receiverRandomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{receiverRandomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Received Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"connectionId\", JsonData[0].id);\r",
											"\r",
											"pm.test(\"Check if response is valid JSON response body\", function() {\r",
											"    pm.expect(JsonData[0], \"Response data should be an object\").to.be.an(\"object\");\r",
											"    pm.expect(JsonData[0].id, \"id should be a number\").to.be.an(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check for connectionId number\", () => {\r",
											"    pm.expect(JsonData[0].id, \"id should match the collection variable connectionId\").to.be.eql(pm.collectionVariables.get(\"connectionId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}{{requestEndpoint}}{{generatedIdUserReceiver}}/request/",
									"host": [
										"{{baseUrl}}{{requestEndpoint}}{{generatedIdUserReceiver}}"
									],
									"path": [
										"request",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Approve Request",
					"item": [
						{
							"name": "Register Receiver User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUserReceiver =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUserReceiver\", generatedIdUserReceiver);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var receiverRandomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"receiverRandomUserName\", receiverRandomUserName)\r",
											"\r",
											"var receiverRandomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"receiverRandomPassword\", receiverRandomPassword)\r",
											"\r",
											"var receiverRandomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"receiverRandomEmail\", receiverRandomEmail)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{receiverRandomPassword}}\",\r\n    \"email\": \"{{receiverRandomEmail}}\",\r\n    \"password\": \"{{receiverRandomPassword}}\",\r\n    \"username\": \"{{receiverRandomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Sender User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"let generatedIdUserSender =pm.response.text().split(\" \")[6]",
											"pm.collectionVariables.set(\"generatedIdUserSender\", generatedIdUserSender);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var senderRandomUserName = pm.variables.replaceIn('{{$randomFirstName}}{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"senderRandomUserName\", senderRandomUserName)\r",
											"\r",
											"var senderRandomPassword = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"pm.collectionVariables.set(\"senderRandomPassword\", senderRandomPassword)\r",
											"\r",
											"var senderRandomEmail = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"pm.collectionVariables.set(\"senderRandomEmail\", senderRandomEmail)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"authorities\": [\r\n        \"{{roleUser}}\"\r\n    ],  \r\n    \"category\": {\r\n        \"id\": {{categoryNumber}},\r\n        \"name\": \"{{categoryName}}\"\r\n    },\r\n\r\n    \"confirmPassword\": \"{{senderRandomPassword}}\",\r\n    \"email\": \"{{senderRandomEmail}}\",\r\n    \"password\": \"{{senderRandomPassword}}\",\r\n    \"username\": \"{{senderRandomUserName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{registerEndpoint}}",
									"host": [
										"{{baseUrl}}{{registerEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Sender User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{senderRandomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{senderRandomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{generatedIdUserReceiver}},  //works hardcoded only\r\n  \"username\": \"{{receiverRandomUserName}}\" //variable does not get filled \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/request?principal={{senderRandomUserName}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"request"
									],
									"query": [
										{
											"key": "principal",
											"value": "{{senderRandomUserName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout Sender User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=BF5B8190ABD1AFCF24B51BC1FECDD53E"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"url": {
									"raw": "{{baseUrl}}{{logoutEndpoint}}",
									"host": [
										"{{baseUrl}}{{logoutEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Receiver User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"console.log(pm.cookies.get('JSESSIONID'))\r",
											"const sessionId = pm.cookies.get('JSESSIONID')\r",
											"pm.environment.set(\"sessionId\", sessionId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
									},
									{
										"key": "Accept-Language",
										"value": "en-US,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "max-age=0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Cookie",
										"value": "JSESSIONID=03270F78EF640B037A24A5375AAE1F7F"
									},
									{
										"key": "Origin",
										"value": "http://localhost:8081"
									},
									{
										"key": "Referer",
										"value": "http://localhost:8081/login?logout"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "document"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "navigate"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "Sec-Fetch-User",
										"value": "?1"
									},
									{
										"key": "Upgrade-Insecure-Requests",
										"value": "1"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Google Chrome\";v=\"117\", \"Not;A=Brand\";v=\"8\", \"Chromium\";v=\"117\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{receiverRandomUserName}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{receiverRandomPassword}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}{{loginEndpoint}}",
									"host": [
										"{{baseUrl}}{{loginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Received Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var JsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"connectionId\", JsonData[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}{{requestEndpoint}}{{generatedIdUserReceiver}}/request/",
									"host": [
										"{{baseUrl}}{{requestEndpoint}}{{generatedIdUserReceiver}}"
									],
									"path": [
										"request",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Date in the header should be valid\", function () {\r",
											"    const parsedDate = new Date(pm.response.headers.get('Date'));\r",
											"    pm.expect(parsedDate, \"Date in the header should be a valid date\").to.be.a('date');\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains specific string response for successful approved request\", () => {\r",
											"    var username = pm.collectionVariables.get(\"senderRandomUserName\");\r",
											"    var expectedString = `${pm.collectionVariables.get(\"receiverRandomUserName\")} approved request of ${username}`;\r",
											"    pm.expect(pm.response.text(), `The response text should include: \"${expectedString}\"`).to.include(expectedString);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "JSESSIONID={{sessionId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}{{requestEndpoint}}{{generatedIdUserReceiver}}/request/approve?requestId={{connectionId}}",
									"host": [
										"{{baseUrl}}{{requestEndpoint}}{{generatedIdUserReceiver}}"
									],
									"path": [
										"request",
										"approve"
									],
									"query": [
										{
											"key": "requestId",
											"value": "{{connectionId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Skill Controller",
			"item": [
				{
					"name": "Find All",
					"item": [
						{
							"name": "Create Skill",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomSkill = pm.variables.replaceIn('{{$randomJobType}}')\r",
											"pm.collectionVariables.set(\"randomSkill\", randomSkill)\r",
											"\r",
											"pm.collectionVariables.set (\"randomNum\", _.random (100,157));\r",
											"pm.collectionVariables.set (\"randomNumCategory\", _.random (166,666));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"var skillId = responseBody.skillId;",
											"pm.collectionVariables.set(\"skillId\", skillId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": {\r\n    \"id\": {{randomNum}}\r\n  },\r\n  \"skill\": \"{{randomSkill}}\",\r\n  \"skillId\": {{randomNumCategory}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{skillsEndpointCreate}}",
									"host": [
										"{{baseUrl}}{{skillsEndpointCreate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find All Skills",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var structure = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Check the structure\", function() {\r",
											"    pm.expect(structure.category, \"Category should be an object\").to.be.an(\"object\");\r",
											"    pm.expect(structure.category, \"Category should have an 'id' property\").to.have.property(\"id\");\r",
											"    pm.expect(structure.category, \"Category should have a 'name' property\").to.have.property(\"name\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if 'skill' matches expected skill id\", function () {\r",
											"    var structure = pm.response.text();\r",
											"    pm.expect(structure, `The response text should contain the skillId: ${pm.collectionVariables.get(\"skillId\")}`).to.include(pm.collectionVariables.get(\"skillId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}{{skillEndpoint}}?sorted=true&unsorted=true",
									"host": [
										"{{baseUrl}}{{skillEndpoint}}"
									],
									"query": [
										{
											"key": "sorted",
											"value": "true"
										},
										{
											"key": "unsorted",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Skill",
					"item": [
						{
							"name": "Create Skill",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomSkill = pm.variables.replaceIn('{{$randomJobType}}')\r",
											"pm.collectionVariables.set(\"randomSkill\", randomSkill)\r",
											"\r",
											"pm.collectionVariables.set (\"randomNum\", _.random (100,157));\r",
											"pm.collectionVariables.set (\"randomNumCategory\", _.random (166,666));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"var skillId = responseBody.skillId;",
											"pm.collectionVariables.set(\"skillId\", skillId);",
											"",
											"pm.test(\"Response body should contain the correct SkillId\", function () {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.category.id, \"SkillId should match the collection variable randomNum\").to.eql(pm.collectionVariables.get(\"randomNum\"));",
											"});",
											"",
											"pm.test(\"Response body should contain the correct form data\", function () {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody, \"Response data should be an object\").to.be.an('object');",
											"    pm.expect(responseBody.skillId, \"skillId should be a number\").to.be.an('number');",
											"    pm.expect(responseBody.skill, \"skill should be a string\").to.be.an('string');",
											"    pm.expect(responseBody.category, \"category should be an object\").to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response body should contain the correct Skill Name\", function () {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.skill, `Skill should match the collection variable randomSkill: ${pm.collectionVariables.get(\"randomSkill\")}`).to.eql(pm.collectionVariables.get(\"randomSkill\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": {\r\n    \"id\": {{randomNum}}\r\n  },\r\n  \"skill\": \"{{randomSkill}}\",\r\n  \"skillId\": {{randomNumCategory}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{skillsEndpointCreate}}",
									"host": [
										"{{baseUrl}}{{skillsEndpointCreate}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Skill",
					"item": [
						{
							"name": "Create Skill",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomSkill = pm.variables.replaceIn('{{$randomJobType}}')\r",
											"pm.collectionVariables.set(\"randomSkill\", randomSkill)\r",
											"\r",
											"pm.collectionVariables.set (\"randomNum\", _.random (100,157));\r",
											"pm.collectionVariables.set (\"randomNumCategory\", _.random (166,666));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"var skillId = responseBody.skillId;",
											"pm.collectionVariables.set(\"skillId\", skillId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": {\r\n    \"id\": {{randomNum}}\r\n  },\r\n  \"skill\": \"{{randomSkill}}\",\r\n  \"skillId\": {{randomNumCategory}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{skillsEndpointCreate}}",
									"host": [
										"{{baseUrl}}{{skillsEndpointCreate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Created Skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var responseText = pm.response.text();\r",
											"  \r",
											"pm.test(\"Check if the response body is empty\", function () {\r",
											"    pm.expect(responseText, \"Response body should be empty\").to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}{{SkillsDeleteEndpoint}}{{skillId}}",
									"host": [
										"{{baseUrl}}{{SkillsDeleteEndpoint}}{{skillId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit Skill",
					"item": [
						{
							"name": "Create Skill",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomSkill = pm.variables.replaceIn('{{$randomJobType}}')\r",
											"pm.collectionVariables.set(\"randomSkill\", randomSkill)\r",
											"\r",
											"pm.collectionVariables.set (\"randomNum\", _.random (100,157));\r",
											"pm.collectionVariables.set (\"randomNumCategory\", _.random (166,666));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"var skillId = responseBody.skillId;",
											"pm.collectionVariables.set(\"skillId\", skillId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": {\r\n    \"id\": {{randomNum}}\r\n  },\r\n  \"skill\": \"{{randomSkill}}\",\r\n  \"skillId\": {{randomNumCategory}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{skillsEndpointCreate}}",
									"host": [
										"{{baseUrl}}{{skillsEndpointCreate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Created Skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text(), \"Response body should be empty\").to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var editedSkill = pm.variables.replaceIn('{{$randomJobTitle}}')\r",
											"pm.collectionVariables.set(\"editedSkill\", editedSkill)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}{{skillsEndpointEdit}}{{editedSkill}}&skillId={{skillId}}",
									"host": [
										"{{baseUrl}}{{skillsEndpointEdit}}{{editedSkill}}&skillId={{skillId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Created Skill",
					"item": [
						{
							"name": "Create Skill",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomJobTitle = pm.variables.replaceIn('{{$randomJobTitle}}')\r",
											"pm.collectionVariables.set(\"randomJobTitle\", randomJobTitle)\r",
											"\r",
											"var randomSkill = pm.variables.replaceIn('{{$randomJobType}}')\r",
											"pm.collectionVariables.set(\"randomSkill\", randomSkill)\r",
											"\r",
											"pm.collectionVariables.set (\"randomNum\", _.random (100,157));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);",
											"});",
											"",
											"var responseBody = pm.response.json();",
											"var skillId = responseBody.skillId;",
											"",
											"pm.collectionVariables.set(\"skillId\", skillId);",
											"",
											"pm.test(\"Response body should contain the correct SkillId\", function () {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.category.id, \"SkillId should match the collection variable randomNum\").to.eql(pm.collectionVariables.get(\"randomNum\"));",
											"});",
											"",
											"pm.test(\"Response body should contain the correct form data\", function () {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody, \"Response data should be an object\").to.be.an('object');",
											"    pm.expect(responseBody.skillId, \"skillId should be a number\").to.be.an('number');",
											"    pm.expect(responseBody.skill, \"skill should be a string\").to.be.an('string');",
											"    pm.expect(responseBody.category, \"category should be an object\").to.be.an('object');",
											"});",
											"",
											"pm.test(\"Response body should contain the correct Skill Name\", function () {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.skill, `Skill should match the collection variable randomSkill: ${pm.collectionVariables.get(\"randomSkill\")}`).to.eql(pm.collectionVariables.get(\"randomSkill\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"category\": {\r\n    \"id\": {{randomNum}},\r\n    \"name\": \"{{randomSkillTitle}}\"\r\n  },\r\n  \"skill\": \"{{randomSkill}}\",\r\n  \"skillId\": 400\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}{{skillsEndpointCreate}}",
									"host": [
										"{{baseUrl}}{{skillsEndpointCreate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Created Skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200,'Status received is ' + pm.response.status);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Check if the response body is empty\", function () {\r",
											"    pm.expect(jsonData, \"Response body should not be empty\").not.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Check if 'skill' matches expected skill name\", function () {\r",
											"    pm.expect(jsonData.skill, `Skill should match the collection variable randomSkill: ${pm.collectionVariables.get(\"randomSkill\")}`).to.eql(pm.collectionVariables.get(\"randomSkill\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response body should contain the correct form data\", function () {\r",
											"    pm.expect(jsonData, \"Response data should be an object\").to.be.an('object');\r",
											"    pm.expect(jsonData.skillId, \"skillId should be a number\").to.be.an('number');\r",
											"    pm.expect(jsonData.skill, \"skill should be a string\").to.be.an('string');\r",
											"    pm.expect(jsonData.category, \"category should be an object\").to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if 'skill' matches expected skill id\", function () {\r",
											"    pm.expect(jsonData.skillId, \"skillId should match the collection variable skillId\").to.eql(pm.collectionVariables.get(\"skillId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}{{skillEndPoint}}getOne?skillId={{skillId}}",
									"host": [
										"{{baseUrl}}{{skillEndPoint}}getOne"
									],
									"query": [
										{
											"key": "skillId",
											"value": "{{skillId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "skillId",
			"value": "",
			"type": "string"
		},
		{
			"key": "generateedIdUser",
			"value": "",
			"type": "string"
		},
		{
			"key": "emailAddress",
			"value": "testUser@yahoo.com",
			"type": "string"
		},
		{
			"key": "generatedNameUser",
			"value": "",
			"type": "string"
		},
		{
			"key": "postId",
			"value": "",
			"type": "string"
		},
		{
			"key": "numberOfUser",
			"value": "10",
			"type": "string"
		},
		{
			"key": "commentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentContent",
			"value": "",
			"type": "string"
		},
		{
			"key": "postContent",
			"value": "",
			"type": "string"
		},
		{
			"key": "editPostContent",
			"value": "Edited Content",
			"type": "string"
		},
		{
			"key": "generatedIKdUserSender",
			"value": "",
			"type": "string"
		},
		{
			"key": "generatedIdUserReceiver",
			"value": "",
			"type": "string"
		},
		{
			"key": "connectionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomUsername",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomPassword",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "receiverRandoUserName",
			"value": "",
			"type": "string"
		},
		{
			"key": "receiverRandomPassword",
			"value": "",
			"type": "string"
		},
		{
			"key": "receiverRandomEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "senderRandomUserName",
			"value": "",
			"type": "string"
		},
		{
			"key": "senderRandomPassword",
			"value": "",
			"type": "string"
		},
		{
			"key": "senderRandomEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "sessionId",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomSkill",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomJobTitle",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomNum",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomNumCity",
			"value": "",
			"type": "string"
		},
		{
			"key": "roleUser",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomFirstName",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomLastName",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomEditedContent",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomEditPicture",
			"value": "",
			"type": "string"
		},
		{
			"key": "editedPostContent",
			"value": "",
			"type": "string"
		},
		{
			"key": "editedPostName",
			"value": "",
			"type": "string"
		},
		{
			"key": "editedSkill",
			"value": "",
			"type": "string"
		},
		{
			"key": "numberOfUserPosts",
			"value": "10",
			"type": "string"
		},
		{
			"key": "randomJobTitleAdd",
			"value": "",
			"type": "string"
		},
		{
			"key": "categoryName",
			"value": "All",
			"type": "string"
		},
		{
			"key": "categoryNumber",
			"value": "100",
			"type": "string"
		},
		{
			"key": "randomNumCategory",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "generatedIdUser",
			"value": ""
		},
		{
			"key": "receiverRandomUserName",
			"value": ""
		},
		{
			"key": "generatedIdUserSender",
			"value": ""
		},
		{
			"key": "randomUserName",
			"value": ""
		},
		{
			"key": "randomJobTitle2",
			"value": ""
		}
	]
}